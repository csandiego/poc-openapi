/*
 * Books API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strconv"
	"strings"

	"github.com/gorilla/mux"
)

// A BookApiController binds http requests to an api service and writes the service results to the http response
type BookApiController struct {
	service BookApiServicer
}

// NewBookApiController creates a default api controller
func NewBookApiController(s BookApiServicer) Router {
	return &BookApiController{ service: s }
}

// Routes returns all of the api route for the BookApiController
func (c *BookApiController) Routes() Routes {
	return Routes{ 
		{
			"Create",
			strings.ToUpper("Post"),
			"/books",
			c.Create,
		},
		{
			"Delete",
			strings.ToUpper("Delete"),
			"/books/{id}",
			c.Delete,
		},
		{
			"Get",
			strings.ToUpper("Get"),
			"/books/{id}",
			c.Get,
		},
		{
			"List",
			strings.ToUpper("Get"),
			"/books",
			c.List,
		},
		{
			"Update",
			strings.ToUpper("Put"),
			"/books/{id}",
			c.Update,
		},
	}
}

// Create - 
func (c *BookApiController) Create(w http.ResponseWriter, r *http.Request) { 
	book := &Book{}
	if err := json.NewDecoder(r.Body).Decode(&book); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.Create(*book)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// Delete - 
func (c *BookApiController) Delete(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id, err := strconv.Atoi(params["id"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.Delete(int32(id))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// Get - 
func (c *BookApiController) Get(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id, err := strconv.Atoi(params["id"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.Get(int32(id))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// List - 
func (c *BookApiController) List(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.List()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// Update - 
func (c *BookApiController) Update(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id, err := strconv.Atoi(params["id"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	book := &Book{}
	if err := json.NewDecoder(r.Body).Decode(&book); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.Update(int32(id), *book)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
